name: CI

on: [push]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Install dependencies (Linux)
        run: sudo apt-get install libwxgtk3.0-dev doxygen
        if: matrix.os == 'ubuntu-latest'
      - name: Install dependencies (Mac)
        run: >
          mkdir download; cd download; wget "https://distfiles.macports.org/MacPorts/MacPorts-2.6.2-10.15-Catalina.pkg";
          sudo installer -pkg MacPorts-2.6.2-10.15-Catalina.pkg -target /;
          (echo "file://$GITHUB_WORKSPACE/build_helpers/macos/localports" && cat /opt/local/etc/macports/sources.conf) > tempsources && sudo mv tempsources /local/etc/macports/sources.conf;
          cd build_helpers/macos/localports; sudo /opt/local/bin/portindex; cd ../../../;
          sudo /opt/local/bin/port install wxWidgets-3.2;
          sudo /opt/local/bin/port select --set wxWidgets wxWidgets-3.2
        if: matrix.os == 'macos-latest'
      - name: Download dependencies (Windows)
        run: >
          mkdir download; cd download;
          Invoke-WebRequest "https://github.com/wxWidgets/wxWidgets/releases/download/v3.1.3/wxWidgets-3.1.3.zip" 
          -outfile wxWidgets_source.zip;
          Invoke-WebRequest "https://github.com/wxWidgets/wxWidgets/releases/download/v3.1.3/wxMSW-3.1.3_vc14x_x64_Dev.7z"
          -outfile wxDev_dll.7z;
          Invoke-WebRequest "https://github.com/wxWidgets/wxWidgets/releases/download/v3.1.3/wxMSW-3.1.3_vc14x_x64_ReleaseDLL.7z"
          -outfile wxRelease_dll.7z;
          Invoke-WebRequest "https://github.com/wxWidgets/wxWidgets/releases/download/v3.1.3/wxMSW-3.1.3_vc14x_x64_ReleasePDB.7z"
          -outfile wxRelease_pdb.7z;
          $sourceHash = Get-FileHash -Path wxWidgets_source.zip -Algorithm SHA256;
          $devDLLHash = Get-FileHash -Path wxDev_dll.7z -Algorithm SHA256;
          $releaseDLLHash = Get-FileHash -Path wxRelease_dll.7z -Algorithm SHA256;
          $releasePDBHash = Get-FileHash -Path wxRelease_pdb.7z -Algorithm SHA256;
          $v313SourceKnown = '6973EDF2D4B748948BA901E99653400CE1C48EDDCA2F1571740A2F20A4C18899';
          $v313DevKnown = 'CC812F3BAFBA1A8920CD6617E40C7F177EA6C17E23745986D7589D366A3B77C4';
          $v313ReleaseDLLKnown = 'BF7A06B6B5E59209D862795F98A834DCEC74F051BE46F9187206B0250DA67375';
          $v313ReleasePDBKnown = 'E47D60E779F792E739EE4F312DB36A7710CEB47565E4D2F508C8B230090315C5';
          if ($sourceHash.Hash -ne $v313SourceKnown) { exit(1); };
          if ($devDLLHash.Hash -ne $v313DevKnown) { exit(1); };
          if ($releaseDLLHash.Hash -ne $v313ReleaseDLLKnown) { exit(1); };
          if ($releasePDBHash.Hash -ne $v313ReleasePDBKnown) { exit(1); };
          unzip wxWidgets_source.zip;
          7z x wxDev_dll.7z;
          7z x wxRelease_dll.7z;
          7z x wxRelease_pdb.7z;
          cd ../;
          mv download C:\wxWidgets;
        shell: pwsh
        if: matrix.os == 'windows-latest'
      - name: Create build directories
        run: mkdir build; mkdir build_release;
      - name: Prepare CMake builds
        run: cd build; cmake ..; cd ../build_release; cmake -DCMAKE_BUILD_TYPE="Release" ..
        env:
          MACOSX_DEPLOYMENT_TARGET: 10.11
      - name: Compile
        run: cd build; cmake --build .; cd ../build_release; cmake --build . --config Release
        env:
          VERBOSE: 1
          CMAKE_BUILD_PARALLEL_LEVEL: 2
          MACOSX_DEPLOYMENT_TARGET: 10.11
      - name: Bundle application (Mac)
        run: cd build; sudo make install; cd ../build_release; sudo make install;
        env:
          MACOSX_DEPLOYMENT_TARGET: 10.11
        if: matrix.os == 'macos-latest'
      - name: Run tests
        run: cd build; ctest -VV -j 2
        continue-on-error: true
      - name: Save binaries (Linux)
        uses: actions/upload-artifact@v1
        with:
          name: recombinant-linux
          path: build/recombinant/recombinant
        if: matrix.os == 'ubuntu-latest'
      - name: Save binaries (Mac)
        uses: actions/upload-artifact@v1
        with:
          name: recombinant-macos.app
          path: build/recombinant/recombinant.app
        if: matrix.os == 'macos-latest'
      - name: Save release binaries (Mac)
        uses: actions/upload-artifact@v1
        with:
          name: recombinant-macos-release.app
          path: build_release/recombinant/recombinant.app
        if: matrix.os == 'macos-latest'
      - name: Save binaries (Windows)
        uses: actions/upload-artifact@v1
        with:
          name: recombinant-windows
          path: build\recombinant\Debug\recombinant.exe
        if: matrix.os == 'windows-latest'
      - name: Zip release binaries (Windows)
        run: 7z a recombinant_release_cibuild.zip recombinant.exe *.dll
        shell: pwsh
        working-directory: build_release\recombinant\Release\
        if: matrix.os == 'windows-latest'
      - name: Save release binaries (Windows)
        uses: actions/upload-artifact@v1
        with:
          name: recombinant-windows-release
          path: build_release\recombinant\Release\recombinant_release_cibuild.zip
        if: matrix.os == 'windows-latest'
