name: CI

on: [push]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Install dependencies (Linux)
        run: sudo apt-get install libwxgtk3.0-dev doxygen
        if: matrix.os == 'ubuntu-latest'
      - name: Install dependencies (Mac)
        run: >
          mkdir download; cd download; wget "https://distfiles.macports.org/MacPorts/MacPorts-2.6.2-10.15-Catalina.pkg";
          sudo installer -pkg MacPorts-2.6.2-10.15-Catalina.pkg -target /;
          sudo /opt/local/bin/port install wxWidgets-3.2;
          sudo /opt/local/bin/port select --set wxWidgets wxWidgets-3.2
        if: matrix.os == 'macos-latest'
      - name: Download dependencies (Windows)
        run: >
          mkdir download; cd download;
          Invoke-WebRequest "https://github.com/wxWidgets/wxWidgets/releases/download/v3.1.3/wxWidgets-3.1.3.zip" 
          -outfile wxWidgets.zip;
          $hashFromFile = Get-FileHash -Path wxWidgets.zip -Algorithm SHA256;
          $v313hash = '6973EDF2D4B748948BA901E99653400CE1C48EDDCA2F1571740A2F20A4C18899';
          if ($hashFromFile.Hash -ne $v313hash) { exit(1); };
          unzip wxWidgets.zip
        shell: pwsh
        if: matrix.os == 'windows-latest'
      - name: Compile wxWidgets (Windows)
        run: >
          CALL "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat" &&
          cd download\build\msw &&
          nmake /f makefile.vc BUILD=release TARGET_CPU=X64 &&
          nmake /f makefile.vc TARGET_CPU=X64 &&
          cd ..\..\..\
        shell: cmd
        if: matrix.os == 'windows-latest'
      - name: Move wxWidgets into place (Windows)
        run: mv download C:\wxWidgets
        shell: pwsh
        if: matrix.os == 'windows-latest'
      - name: Create build directory
        run: mkdir build
      - name: Prepare CMake build
        working-directory: ./build
        run: pwd; cmake ..
      - name: Compile
        working-directory: ./build
        run: cmake --build .
        env:
          VERBOSE: 1
          CMAKE_BUILD_PARALLEL_LEVEL: 2
      - name: Save binaries (Linux)
        uses: actions/upload-artifact@v1
        with:
          name: recombinant-linux
          path: build/recombinant/recombinant
        if: matrix.os == 'ubuntu-latest'
      - name: Save binaries (Mac)
        uses: actions/upload-artifact@v1
        with:
          name: recombinant-macos
          path: build/recombinant/recombinant
        if: matrix.os == 'macos-latest'
      - name: Save binaries (Windows)
        uses: actions/upload-artifact@v1
        with:
          name: recombinant-windows
          path: build\recombinant\Debug\recombinant.exe
        if: matrix.os == 'windows-latest'

